1 , 增
	getHIbernateTemplate().save(对象);
	
2 , 删除: 根据id来删除
	删除之前 , 先要通过id获得该对象
	getHIbernateTemplate().delete(从数据库获得的对象);
	
3 , 改
	修改之前 , 不需要通过id获得该对象
		因为update修改的对象 , 必定是从数据库表中读取出来的
		是一个持久化状态的对象
	getHIbernateTemplate().update(修改过后的对象);
	
4 , 查询
	0) 在hibernateDaoTemplement中只能使用 离线查询对象 DetachedCriteria
		因为在hibernateDaoTemplete中 , 使用离线查询对象是 
			底层使用的还是标准查询Criteria对象
			并且 , 使用的是hql查询 , 封装了HQL的查询
		
	
	1) 根据id查询单个对象
		getHIbernateTemplate().get(Customer.class id)
		
	2) 根据条件查询总记录数
		这是离线查询对象的聚合函数
			DetachedCriteria.setProjection(Projections.rowCount());
			
		getHIbernateTemplate().findByCriteria(离线查询对象)
		
		清空之前设置的聚合函数
			dc.setProjection(null);
	
	3) 分页查询
		getHIbernateTemplate().findByCriteria(离线查询对象 , 起始索引 , 查询条数)