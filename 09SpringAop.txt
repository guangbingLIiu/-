1 , Aop理解
	aop是一种思想 , 叫做面向切面编程
	在以往的知识中 , 我们接触到的有 : 
		JavaEE中的拦截器 , 多个servlet , 使用一个拦截器后 , 统一拦截
		service层中统一管理事务
		strust2 Action中统一给参数赋值
		
2 , spring中的Aop概念
	1) 理解 :
		spring能够为容器中管理的对象 , 动态生成代理对象
		
		静态代理 , 自己书写一个代理类 , 里面封装了包括增强的代码
		使用jdk自带的proxy类来实现代理 , 代理类是自动生成的 , 不过需要自己配置增强代码
		
		所以spring的思路也是 , 代理类肯定是自动生成的 , 不过增强的代码需要自己配置
	
	2) 关于Aop 与 动态代理的之间的关系
		aop是面向切面的编程的思想 , 其实最关键的还是动态代理的技术
		实现aop需要用到动态代理的技术
		动态代理的技术肯定要用到反射的技术支持
		
3 , spring实现Aop使用到技术
	1) jdk自带的动态代理技术 
		目标类必须实现某一个接口才行
		推荐
	2) cglib代理 , 使用继承的方式实现动态代理
	
4 , aop名字
	Joinpoint : 连接点 , 目标对象中所有可以增强的方法
	PointCut : 切入点 , 已经增强的方法
	advice : 增强代码 \ 又叫通知
	target : 被代理对象 \ 目标对象
	weaving : 织入 , 将增强代码应用到切入点的过程
	proxy : 代理对象
	aspect : 切面 , 切入点 + 通知
	
5 , 使用xml配置aop
	1) 导包
		spring aspect包
		spring aop包 , 在使用注解时 , 也需要用到aop包
		
		第三方jar包
			在spring提供的外部jar包文件夹中有的
			
	2) 准备目标对象
		一般推荐使用接口的实现类 , 比如我们要想实现事务管理 
			需要对service层中的代码进行增强
			
	3) 准备增强 \ 通知
		首先要一个增强类
		然后一个方法表示一种增强
			前置通知
			后置通知
			环绕通知 , 特殊写法
				public object around(proceedingJoinPoint pjg){
					
					object obj = pjg.proceed();
					
					return obj ;
					
				}
	4) 在applicationContext.xml文件中织入 , 将增强代码应用到切点上
		
		(1) 将目标对象 \ 增强对象配置为bean 
			因为spring生成的代理类会用到这个两个bean
		
		(2) 使用aop的标签 , 需要导入新的命名空间
		
		(3) 配置好<bean>之后 , 所有关于aop的配置都在<aop标签下
				<aop : config>
					<aop : pointCut>
					1) 配置切入点 , 切入点不止一个 , 一般是多个 , 需要使用表达式来指定 
						关于如何指定 , 应该使用模板
						* 表示所有方法返回值
						* 表示service包下 , 所有serviceimpl实现类
						* 表示所有方法
						.. 表示任何形式的参数
						
					2) 给这些切点取个名字 , 待会要引用
					
					<aop : aspect ref指定哪一个上面的哪一个bean作为增强>
						1) 这是配置切面 : 切点 + 增强
						2) 首先指定哪一个类作为增强
						
						<aop:before method = "before" 
							3) 指定什么类型的增强  \ 增强的方法是 , 给谁增强(使用上面的pointcut切点id)
							
			总结 : 
				首先要有切点 , 并且是多个切点
				然后要有切面 : 增强和切点配合
					1) 使用哪个类增强
					2) 使用什么增强 \ 增强是什么 \ 增强谁
					
				注意点 : 
					execution( * com.gec.service.impl.UserServiceImpl.*(..)
					最后一个 * 表示类中的方法 , 前面需要 .
					做测试类的时候 , 得到的bean要用 UserService接收 , 要用接口接收 , 而不是使用UserserviceImpl实现类来接收
						因为返回的是一个代理类 , 代理类与目标类的共同点是实现了同一个接口
						
6 , 使用注解实现springAop
	1) 创建目标类接口 \ 目标类
	2) 创建增强类
	3) 将目标类 \ 增强类配置为bean , 给到spring管理
	
	4) 在applicationContext.xml文件打开使用注解配置aop的开关
	
		<aop-autoproxy>注解配置代理类
	
		之前使用注解配置bean的时候 , 需要打开一次开关
		这次使用注解配置aop的时候 , 也需要打开一次开关
		
	5) 在增强类上@aspect , 指明是增强类
	
	6) 在方法上使用@before 
		指明是一个增强方法 , 并且还需要指明是增强的是哪一个切点
		
		(1) 在每一个增强方法上指定一个增强切点
		(2) 在一个类中统一配置增强切点
						
			






















